description: >
  Using a pyproject.toml file, runs formatting, pyright then pytest with coverage

parameters:
  extras:
    description: "Package install extra parameters"
    default: ""
    type: string
  tests-extras:
    description: "Extra parameters for running tests"
    default: ""
    type: string
  before-steps:
    description: "Steps that will be executed before dependencies are installed"
    type: steps
    default: [ ]
  cache-version:
    description: "Cache version (needed in case of cache issue)"
    type: string
    default: "v0"
  skip-lint:
    description: "Skip linting"
    type: boolean
    default: false
  skip-format:
    description: "Skip formatting"
    type: boolean
    default: false
  skip-typecheck:
    description: "Skip checking types"
    type: boolean
    default: false
  formatter:
    description: "Library used to check format"
    type: enum
    default: ruff
    enum:
      - black
      - ruff
  tool:
    description: "The tool to use for running tests"
    default: "poetry"
    type: string
    enum:
      - "poetry"
      - "uv"

steps:
  - when:
      condition:
        equal: [ poetry, << parameters.tool >> ]
      steps:
        - restore_cache:
            keys:
              - deps-<< parameters.cache-version >>-{{ checksum "poetry.lock" }}
        - run:
            name: Install dependencies
            command: poetry install << parameters.extras >>
        - save_cache:
            key: deps-<< parameters.cache-version >>-{{ checksum "poetry.lock" }}
            paths:
              - /home/circleci/.cache/pypoetry/virtualenvs
  - when:
      condition:
        equal: [ uv, << parameters.tool >> ]
      steps:
        - restore_cache:
            keys:
              - deps-<< parameters.cache-version >>-{{ checksum "uv.lock" }}
        - run:
            name: Install dependencies
            command: |
              uv venv
              uv pip sync << parameters.extras >>
        - save_cache:
            key: deps-<< parameters.cache-version >>-{{ checksum "uv.lock" }}
            paths:
              - /home/circleci/.cache/uv


  - steps: << parameters.before-steps >>

  - when:
      condition:
        not: << parameters.skip-lint >>
      steps:
        - run:
            name: Running lint
            command: |
              if [[ "<< parameters.tool >>" == "poetry" ]]; then
                poetry run ruff check .
              else
                 uv run ruff check .
              fi
  - when:
        condition:
            not: << parameters.skip-format >>
        steps:
          - when:
              condition:
                equal: [ black, << parameters.formatter >> ]
              steps:
                - run:
                    name: Checking format
                    command: |
                        if [[ "<< parameters.tool >>" == "poetry" ]]; then
                          poetry run black --check .
                        else
                           uv run black --check .
                        fi
          - when:
              condition:
                equal: [ ruff, << parameters.formatter >> ]
              steps:
                - run:
                    name: Checking format
                    command: |
                        if [[ "<< parameters.tool >>" == "poetry" ]]; then
                          poetry run ruff format --check .
                        else
                           uv run ruff format --check .
                        fi
  - when:
      condition:
          not: << parameters.skip-typecheck >>
      steps:
        - run:
            name: Checking types
            command: |
              if [[ "<< parameters.tool >>" == "poetry" ]]; then
                poetry run pyright
              else
                 uv run run pyright
              fi
  - run:
      name: Running tests
      command: << include(scripts/python/python-tests.sh) >>
      environment:
        TOOL: << parameters.tool >>
        EXTRA_PARAMS: << parameters.tests-extras >>
  - store_test_results:
      path: tests
  - store_artifacts:
      path: htmlcov
